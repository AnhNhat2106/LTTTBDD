import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class QuizService {
  static final _db = FirebaseFirestore.instance;
  static final _auth = FirebaseAuth.instance;

  /// üß† L∆∞u k·∫øt qu·∫£ Quiz c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i (ch·∫ø ƒë·ªô luy·ªán t·∫≠p)
  static Future<void> saveQuizResult({
    required String topic,
    required int score,
    required int total,
  }) async {
    final user = _auth.currentUser;
    if (user == null) return;

    try {
      final double percent = total > 0 ? (score / total * 100) : 0;

      await _db.collection('quiz_results').add({
        'userId': user.uid,
        'email': user.email ?? '',
        'topic': topic,
        'score': score,
        'total': total,
        'percent': percent.toStringAsFixed(1),
        'createdAt': FieldValue.serverTimestamp(),
      });

      print('‚úÖ Quiz result saved successfully for $topic');
    } catch (e) {
      print('‚ùå L·ªói khi l∆∞u k·∫øt qu·∫£ quiz: $e');
    }
  }

  /// üìÑ L·∫•y l·ªãch s·ª≠ quiz c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i (luy·ªán t·∫≠p - PvE)
  static Stream<QuerySnapshot<Map<String, dynamic>>> getUserQuizHistory() {
    final user = _auth.currentUser;
    if (user == null) {
      return const Stream.empty();
    }

    return _db
        .collection('quiz_results')
        .where('userId', isEqualTo: user.uid)
        .orderBy('createdAt', descending: true)
        .snapshots();
  }

  /// ‚öîÔ∏è L·∫•y l·ªãch s·ª≠ thi ƒë·∫•u PvP c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
  static Stream<QuerySnapshot<Map<String, dynamic>>> getUserDuelHistory() {
    final user = _auth.currentUser;
    if (user == null) return const Stream.empty();

    try {
      // y√™u c·∫ßu SDK Firestore >= 4.9
      return _db
          .collection('duel_rooms')
          .where('status', isEqualTo: 'finished')
          .where(Filter.or(
        Filter('player1', isEqualTo: user.uid),
        Filter('player2', isEqualTo: user.uid),
      ))
          .orderBy('finishedAt', descending: true)
          .snapshots();
    } catch (e) {
      print('‚ùå L·ªói khi truy v·∫•n l·ªãch s·ª≠ PvP: $e');
      return const Stream.empty();
    }
  }

  /// üßπ Xo√° t·∫•t c·∫£ k·∫øt qu·∫£ quiz luy·ªán t·∫≠p c·ªßa user (tu·ª≥ ch·ªçn)
  static Future<void> clearUserHistory() async {
    final user = _auth.currentUser;
    if (user == null) return;

    try {
      final snapshot = await _db
          .collection('quiz_results')
          .where('userId', isEqualTo: user.uid)
          .get();

      for (final doc in snapshot.docs) {
        await doc.reference.delete();
      }

      print('üßπ ƒê√£ xo√° to√†n b·ªô l·ªãch s·ª≠ quiz c·ªßa ng∆∞·ªùi d√πng.');
    } catch (e) {
      print('‚ùå L·ªói khi xo√° l·ªãch s·ª≠ quiz: $e');
    }
  }
}
